# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    admin_path: 'admin_oGMqczDCTooyWGv4'
    s3_web_url: '%env(S3_WEB_URL)%'
    asset_version: 1573477929019

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    _instanceof:
        League\Fractal\TransformerAbstract:
            tags: ['app.service_transformer']

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    session.handler.pdo:
        class:     Symfony\Component\HttpFoundation\Session\Storage\Handler\PdoSessionHandler
        public:    false
        arguments:
            - '%env(DATABASE_URL)%'

    App\Serializer\ArraySerializer:
        class: App\Serializer\ArraySerializer

    League\Fractal\Manager:
        class: League\Fractal\Manager
        calls:
            - [setSerializer, ['@App\Serializer\ArraySerializer']]

    App\Controller\Api\ProfileController:
        public: true
        arguments:
            - '@tactician.commandbus.command'
            - '@tactician.commandbus.query'
            - '@App\Service\TransformerManager'
            - '@logger'

    App\EventSubscriber\AssertExceptionSubscriber:
        tags:
            - { name: kernel.event_subscriber }

    App\Bus\Command\Handler\:
        resource: '../src/Bus/Command/Handler'
        tags:
            - { name: tactician.handler, typehints: true, bus: command }

    App\Bus\Query\Handler\:
        resource: '../src/Bus/Query/Handler'
        tags:
            - { name: tactician.handler, typehints: true, bus: query }

    App\EventSubscriber\ModerationSubscriber:
        arguments:
            - '@event_dispatcher'
            - '@MediaMonks\Doctrine\Transformable\Transformer\TransformerPool'
        tags:
            - { name: doctrine.event_subscriber }

    App\Service\ImageService:
        arguments:
            - '@storage_filesystem'

    App\Service\MailService\MailService:
        arguments:
            - base_uri: 'https://api.sendgrid.com/v3/'
              headers:
                Content-Type: 'application/json'
                Authorization: 'Bearer %env(MAILSERVICE_APIKEY)%'
              service:
                from_address: '%env(MAILSERVICE_FROM_ADDRESS)%'
                templates:
                  approved: '%env(MAILSERVICE_TPL_APPROVED)%'
                  denied: '%env(MAILSERVICE_TPL_DENIED)%'
        tags:
            - { name: kernel.event_listener, event: App\Event\ProfileModerated, method: onProfileModerated }

    App\Transformer\ProfileTransformer:
        arguments:
            - '%s3_web_url%'

    App\Transformer\TransformerCollection:
        arguments: [!tagged app.service_transformer]